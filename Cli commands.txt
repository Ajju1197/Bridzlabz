Command line interface (CLI) Gitbash:
"~" is representing home.
"ls" showing all folders.
"ls -l" "long format" shorhand "ll" giving detail address
"ls -a" showing hidden folder also.
"ls .." previous folder details
"ls ~ " homescreen
creating a new folder "mkdir <foldername>"
"history" last usage commands showing
live location or current location "pwd"
for nested folder "mkdir -p parent/child/subchild"
romove folders "rm -rf parent/" means force delete
creating a file command "touch foldername.java"
for file content showing command "cat foldername.java"
"cp -r foldername.java ../parent" copy the folders or files
"mv ../child/subchild  ../parent" cut the folders or files

"grep and pipe" filter the data find 
cat data.csv | grep <content name>
ls | grep foldername
ls | grep -v/


"echo good morning | awk '{print $0}'

15 POOJA DEVELOPER 20000 2000 3000 25000 25000
"cat data.csv | grep POOJA | awk '{print $2 " " $3 " " $8}'


"cat data.csv | grep POOJA | awk '{total+=$8} END {print total}'.

//////
Mentors CodInClub08:05
Use Cases :-
1. Create a New Directory as “stage1_review”
2. Get inside a directory & Create multiple files such as
* Add.java
* Sub.js 
*Multiply.py
*Division.cs
Finally Create a shell script file for your logic execution as “day4.sh”
3.Cut or move a file & paste into specific folder/directory 
Expected Result:-
Add/java/Add.java
Sub/js/Sub.js
Multiply/py/Multiply.py
Division/cs/Division.cs
*****Make sure Needs to create sub-folder as your file extension name*****
nandhak907@gmail.com
/////////////
Algorithm:-
step 1: mkdir stage1_review
step 2: cd stage1_review & touch Add.java Sub.js Multiply.py Division.cs day4.sh
step 3: move a file & paste into specific folder/directory 


//////////////////////////////
Algorithm :-
step 1 :-
        List only Java Files
        Example : a.java b.java c.java
        Done
step 2 :-
        find a 'Name' of that java-files
        Example : a.java ===> a
                  b.java ===> b
                  c.java ===> c
        Done
step 3 :-
        Create a folder with same name as a file-name
        Example : a.java ===> a/
                  b.java ===> b/
                  c.java ===> c/
        Done
step 4 :-
        copy a original file (a.java) & paste into a specific folder
        Example : -
        Done



solution :-for item in `ls *.java`
do
    fn=`echo $item | awk -F. '{ print $1 }'`
    if [ -d $fn ]
    then
        echo "Inside If Condition ..."
        rm -rf $fn
    fi
    mkdir $fn
    cp -r $item $fn
done                      
//////////////////////////////////////////////
number=$((RANDOM%3))
salary=0
perHourCost=100
logHoursAsFullTime=8
logHoursAsPartTime=4
isFulltime=2
isParttime=1
isAbsent=0

                    if [ $number == $isFulltime ]
                    then
                         salary=$((perHourCost*logHoursAsFullTime))
                         echo "Employee Joined As Full-Time Job"
                         echo "Income Is $salary"
                    elif [ $number == $isParttime ]
                    then
                         salary=$((perHourCost*logHoursAsPartTime))
                         echo "Employee Joined As Part-Time Job"
                         echo "Income Is $salary"
                    else
                         echo "Employee Absent"
                         echo "Income Is $salary"
                    fi

/////////////////////////////////
read -p "Enter Your Firstname here " firstname

echo "Enter Your Lastname here"
read lastname


echo "My Full-Name Is $firstname$lastname"
///////////////////////
read -p "Enter Your Favourite Player In IPL " player

case $player in
   dhoni)
      echo "He Is From CSK"
      ;;
   kohli)
      echo "He Is From RCB"
      ;;
   rohit)
      echo "He Is From MI"
      ;;
   williamson)
      echo "He Is From SRH"
      ;;
   *)
     echo "Invalid Input :( Please check again ..."
     ;;
esac

///////////////////////////for item in `ls`
do
    extensionName=`echo $item | awk -F. '{ print $2 }'`
    case $extensionName in
      java)
          echo "$item is a JAVA File"
      ;;
      py)
          echo "$item is a PYTHON File"
      ;;
      sh)
          echo "$item is a SHELLSCRIPT File"
      ;;
      *)
      echo "Something went wrong ..."
      ;;
    esac
done   

/////////////////////////////////////////

rcbTeams=("Abd" "Virat" "Chahal")
echo "**************ADD***************"
echo "Before Add ===> " ${rcbTeams[@]}
rcbTeams[3]="Simon"
echo "After Add ===> " ${rcbTeams[@]}
echo "**************UPDATE************"
echo "Before Update ===> " ${rcbTeams[@]}
rcbTeams[2]="Siraj"
echo "After Update ===> " ${rcbTeams[@]}
echo "**************DELETE************"
echo "Before Delete ===> " ${rcbTeams[@]}
unset 'rcbTeams[3]'
echo "After Delete ===> " ${rcbTeams[@]}
echo "**********Length Of An Array**********"
echo "Length/HeadCount Of An Array"
echo ${#rcbTeams[@]}
echo "*******Index No's Of An Array**********"
echo "Index No's Of An Array"
echo ${!rcbTeams[@]}
echo "****************************************"

//////////////////////////////////////

rcbTeams=("Abd" "Virat" "Chahal")
           for item in ${rcbTeams[@]}
           do
               if [ $item == "Chahal" ]
               then
                   echo "$item Is a bowler of RCB"
               elif [ $item == "Abd" ]
               then
                   echo "$item Is a batsman of RCB"
               else
                   echo "$item Is a Captain of RCB"
               fi
           done
///////////////////////////////////////////
declare -A movies

movies[english]="spiderman"
movies[telugu]="bahubali"
movies[tamil]="master"
movies[hindi]="kick"

echo "**************ADD***************"
echo "Before Add ===> " ${movies[@]}
movies[malayalam]="kurup"
echo "After Add ===> " ${movies[@]}
echo "**************UPDATE************"
echo "Before Update ===> " ${movies[@]}
movies[telugu]="arjunreddy"
echo "After Update ===> " ${movies[@]}
echo "**************DELETE************"
echo "Before Delete ===> " ${movies[@]}
unset movies[english]
echo "After Delete ===> " ${movies[@]}
echo "**********Length Of An Dictionary**********"
echo "Length/HeadCount Of An Dictionary"
echo ${#movies[@]}
echo "*******Only Keys In A Dictionary**********"
echo "Only Keys In A Dictionary"
echo ${!movies[@]}
echo "*******"
/////////////////////////////////
declare -A miTeams
miTeams[bowl]="bumrah"
miTeams[bat]="suryakumar"
miTeams[captain]="rohit"
